
* An entity type registration system.

  Instead of big block blocks of 'if (type=="Foo") return Foo(...)' and similar,
  make a system whereby classes handle more of their own stuff. It should be
  possible for any Entity-derived class to register as a handler for a named
  type.  This also allows the core library to automatically return instances of
  a user-created class to handle any entity.

  Classes should also tell the core (and anyone else who wants to know) which
  attributes they manage--it shouldn't be in a giant if block.
  
  This would also make it possible to register handler classes for custom 
  entities without having to modify the core.
  
  The core, and also entity classes, would not need so much hard-coded knowledge
  about each other.

* Clarify 'name' vs. 'code' vs. 'title' attributes/methods.  Very confusing as
  it is.  Maybe it's just as confusing in Shotgun itself...

* Make all attribute getters/setters virtual.

* Make classes for other entities

* The classes are too 'friendly' with each other :|

* Add getter/setter methods for all shotgun built-in attributes.

* There are still places where incorrect assumptions were made, resulting in
  code that is incorrect, not generic enough, or lacks features.

* Needs some examples and more tests

* Doxygen-ify the comments & add a make target to build docs

* Change Entity.m_sg from Shotgun* to Shotgun&, set in initializer

* Move toStdString() and operator<< overloads into individual classes.  They
  shouldn't be all grouped together in one file as they are.

* There's a TON of unnecessary copying going on.  Use more references!

* Handle date/time fields correctly.  Need to take into account timezone,
  etc.  I believe shotgun stores date/times internally as UTC, so convert
  (correctly!) to/from local time (or other if specified).

* Make the python plugin build process better--get rid of configure.py


