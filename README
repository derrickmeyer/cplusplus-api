

Shotgun C++ / Python API

http://github.com/shotgunsoftware/cplusplus-api


*************************************************

                    WARNING

The API is not yet stable.  This library isn't
ready to be used in a production environment yet.

*************************************************


Background
----------

    Tippett Studio has been using Shotgun in production for several years. 
During that time, we've developed a number of tools and processes that work with
data in Shotgun, almost all of which are written in Python.  

We wanted an object-oriented framework for adding "business logic" to Shotgun. 
That is, we wanted to work with Shotgun's entities in an object-oriented
fashion, and extend them add useful behavior that was meaningful to our shop. 
From this desire, an extensive Python library grew.  

Thought it was a very successful first-gen API, unfortunately, there wasn't a
good separation between the object/entity interface, and a lot of
Tippett-specific attributes and behavior crept into our original API.  It didn't
provide a C++ interface either.

This library is a ground-up rewrite, with the following design goals:

    - C++ core and a thin Python wrapper, posible to extend to other languages.

    - Clean separation between the object/entity representation and any
      business logic.

    - Easy to use.  Don't expose the underlying transport.  Users don't need
      to know about the underlying xmlrpc transport.

    - Easy to extend.  Using this library as a core, studios can derive
      site-specific classes to add business logic and manage dynamic
      attributes.



Building
--------

  * The only dependency is the xmlrpc-c library, available at
    http://xmlrpc-c.sourceforge.net/  Make sure the xmlrpc-c-config binary is in
    your path so configure can find it.

  * --with-default-url
    Specify a URL to use by default when creating a Shotgun instance (you can
    always override it at runtime).  If you don't give it a default URL, 'make
    check' skips the tests, but you can still run them manually with a URL on
    the command line.

  * --enable-python
    Turning this on will also build the sip-based Python interface.  
